create table public.gastos (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  user_id uuid null default auth.uid (),
  formato_id bigint not null,
  fecha_gasto date not null default CURRENT_DATE,
  monto_total numeric null,
  moneda text null default '''ARS'''::text,
  descripcion_general text null,
  datos_adicionales jsonb null,
  factura_url text null,
  numero_factura text null,
  viaje_id bigint null,
  tipo_gasto_id bigint null,
  cliente_referido text null,
  adelanto_especifico_aplicado numeric null,
  monto_iva numeric null,
  cliente_id bigint null,
  transporte_id bigint null,
  provincia_texto_legacy text null,
  proveedor_id bigint null,
  caja_id bigint null,
  creado_por_id uuid null,
  estado_delegacion text not null default 'directo'::text,
  grupo_id bigint null,
  estado_revision text not null default 'en_revision'::text,
  comentario_revision text null,
  transporte_origen text null,
  transporte_destino text null,
  vehiculo_id bigint null,
  localidad_origen_id integer null,
  localidad_destino_id integer null,
  provincia_id bigint null,
  provincia text null,
  paciente_referido text null,
  nombre_chofer text null,
  es_revisado boolean not null default false,
  provincia_origen_id bigint null,
  provincia_destino_id bigint null,
  constraint gastos_pkey primary key (id),
  constraint unique_factura_proveedor unique (numero_factura, proveedor_id),
  constraint fk_gastos_provincia foreign KEY (provincia_id) references provincias (id) on delete set null,
  constraint fk_gastos_provincia_destino foreign KEY (provincia_destino_id) references provincias (id) on delete set null,
  constraint fk_gastos_provincia_origen foreign KEY (provincia_origen_id) references provincias (id) on delete set null,
  constraint fk_gastos_vehiculo_id foreign KEY (vehiculo_id) references vehiculos (id) on delete set null,
  constraint fk_localidad_destino foreign KEY (localidad_destino_id) references localidades (id) on delete set null,
  constraint fk_localidad_origen foreign KEY (localidad_origen_id) references localidades (id) on delete set null,
  constraint gastos_caja_id_fkey foreign KEY (caja_id) references cajas_chicas (id) on delete set null,
  constraint gastos_cliente_id_fkey foreign KEY (cliente_id) references clientes (id) on delete set null,
  constraint gastos_creado_por_id_fkey foreign KEY (creado_por_id) references perfiles (id) on delete set null,
  constraint fk_gastos_grupo_id foreign KEY (grupo_id) references grupos_gastos (id) on delete set null,
  constraint gastos_user_id_fkey foreign KEY (user_id) references auth.users (id) on update CASCADE on delete CASCADE,
  constraint gastos_user_id_fkey_to_perfiles foreign KEY (user_id) references perfiles (id) on update CASCADE on delete set null,
  constraint gastos_viaje_id_fkey foreign KEY (viaje_id) references viajes (id) on delete CASCADE,
  constraint gastos_formato_id_fkey foreign KEY (formato_id) references formatos_gasto_config (id),
  constraint gastos_proveedor_id_fkey foreign KEY (proveedor_id) references proveedores (id) on delete set null,
  constraint gastos_tipo_gasto_id_fkey foreign KEY (tipo_gasto_id) references tipos_gasto_config (id) on delete set null,
  constraint gastos_transporte_id_fkey foreign KEY (transporte_id) references transportes (id) on delete set null,
  constraint gastos_estado_revision_check check (
    (
      estado_revision = any (
        array[
          'en_revision'::text,
          'aprobado'::text,
          'observado'::text
        ]
      )
    )
  ),
  constraint chk_gasto_origen_exclusivo_v2 check (
    (
      (
        (
          case
            when (viaje_id is not null) then 1
            else 0
          end + case
            when (caja_id is not null) then 1
            else 0
          end
        ) + case
          when (vehiculo_id is not null) then 1
          else 0
        end
      ) <= 1
    )
  ),
  constraint chk_estado_delegacion check (
    (
      estado_delegacion = any (
        array[
          'directo'::text,
          'pendiente_aceptacion'::text,
          'aceptado'::text,
          'rechazado'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_gastos_user_id_viaje_id on public.gastos using btree (user_id, viaje_id) TABLESPACE pg_default;

create trigger trg_check_gasto_duplicado_contextual BEFORE INSERT
or
update on gastos for EACH row
execute FUNCTION check_gasto_duplicado_contextual ();